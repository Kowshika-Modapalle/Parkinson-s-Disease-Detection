# -*- coding: utf-8 -*-
"""Parkinson's-disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dROJL9fZbNDgd5ep0s1jSFo6yc7ylwX

FIRST IMPORT THE REQUIRED DEPENDENCIES
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""COLLECTION AND ANALYSIS OF DATA"""

from google.colab import drive
drive.mount('/content/drive')

park_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/parkinsons.csv')

park_data.head()

park_data.shape

park_data.info()

park_data.isnull().sum()

park_data['status'].value_counts()

"""0 - indicates healthy 


1 - indicates Parkinson's disease
"""

park_data.groupby('status').mean()

"""DATA PREPROCESSSING"""

X = park_data.drop(columns=['name','status'], axis=1)
Y = park_data['status']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""STANDARDIZING THE DATA"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""USING SUPPORT VECTOR MACHINE MODEL"""

model = svm.SVC(kernel='linear')

#traning the model with train data
model.fit(X_train, Y_train)

"""MODEL EVALUATION AND ACCURACY"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score: ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

"""PREDICTIVE SYSTEM"""

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

# change input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person is healthy")

else:
  print("The Person has Parkinson's disease")